From 6099867f56b9e5e8240bc0b16a00aac6e67112ed Mon Sep 17 00:00:00 2001
From: Rajorshi27 <64450538+Rajorshi27@users.noreply.github.com>
Date: Tue, 25 Jun 2024 12:39:26 -0400
Subject: [PATCH 1/2] Update client3.py

---
 client3.py | 12 +++++++-----
 1 file changed, 7 insertions(+), 5 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..a17c19c 100644
--- a/client3.py
+++ b/client3.py
@@ -31,18 +31,18 @@ N = 500
 
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2  # Calculate the average price
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return float('inf')  # Avoid division by zero
+    return price_a / price_b
 
 
 # Main
@@ -52,8 +52,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
-- 
2.43.2


From f7508a506ad8e54c384b142f0a7172aa0a9506a7 Mon Sep 17 00:00:00 2001
From: Rajorshi27 <64450538+Rajorshi27@users.noreply.github.com>
Date: Tue, 25 Jun 2024 12:43:40 -0400
Subject: [PATCH 2/2] Update client_test.py

---
 client_test.py | 38 ++++++++++++++++++++++++++++++++++----
 1 file changed, 34 insertions(+), 4 deletions(-)

diff --git a/client_test.py b/client_test.py
index af2bf26..37482a9 100644
--- a/client_test.py
+++ b/client_test.py
@@ -7,19 +7,49 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
+    
+    for quote in quotes:
+            self.assertEqual(
+                getDataPoint(quote),
+                (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], 
+                 (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
+            )
 
+  
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
       {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
-    """ ------------ Add the assertion below ------------ """
 
-
-  """ ------------ Add more unit tests ------------ """
+    for quote in quotes:
+            self.assertEqual(
+                getDataPoint(quote),
+                (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], 
+                 (quote['top_bid']['price'] + quote['top_ask']['price']) / 2)
+            )
 
 
+  def test_getRatio(self):
+        # Test when price_b is not zero
+        price_a = 120.0
+        price_b = 60.0
+        self.assertEqual(getRatio(price_a, price_b), 2.0)
+        
+        # Test when price_b is zero
+        price_a = 120.0
+        price_b = 0.0
+        self.assertIsNone(getRatio(price_a, price_b))
+        
+        # Test when price_a is zero
+        price_a = 0.0
+        price_b = 120.0
+        self.assertEqual(getRatio(price_a, price_b), 0.0)
+        
+        # Test when both prices are zero
+        price_a = 0.0
+        price_b = 0.0
+        self.assertIsNone(getRatio(price_a, price_b))
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.43.2

